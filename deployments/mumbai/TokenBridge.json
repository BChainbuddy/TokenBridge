{
  "address": "0xBb3e2a673660C9437B7Cf3A2403b00A124869e08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum TokenBridge.transferType",
          "name": "_type",
          "type": "uint8"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "currentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getCurrentNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "messageHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonceInProgress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "receiveTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "sendTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x915faf706f77d8e5ca2d201d0bc9b6a4b8c048e714d41db4629e7ea3b1f8639a",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0xBb3e2a673660C9437B7Cf3A2403b00A124869e08",
    "transactionIndex": 4,
    "gasUsed": "1161686",
    "logsBloom": "0x
    "blockHash": "0x1f2e58909c9689cc148e210aff0e7d6446124966f236ba216bc342763b1196d3",
    "transactionHash": "0x915faf706f77d8e5ca2d201d0bc9b6a4b8c048e714d41db4629e7ea3b1f8639a",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 42477918,
        "transactionHash": "0x915faf706f77d8e5ca2d201d0bc9b6a4b8c048e714d41db4629e7ea3b1f8639a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000540467feca43907a701311d0721df481d1f9e238",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000086f427e2bfd3400000000000000000000000000000000000000000000000006b91166806ee126000000000000000000000000000000000000000000003534dd016513e2d8e00100000000000000000000000000000000000000000000000006b0a2240242e3f2000000000000000000000000000000000000000000003534dd09d4566104dd35",
        "logIndex": 13,
        "blockHash": "0x1f2e58909c9689cc148e210aff0e7d6446124966f236ba216bc342763b1196d3"
      }
    ],
    "blockNumber": 42477918,
    "cumulativeGasUsed": "1400495",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1D2C9e0F24A61aEBa81230A2747510814623Be05"
  ],
  "numDeployments": 1,
  "solcInputHash": "c1f7d7b6457f0266e849e3b0753a7d84",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum TokenBridge.transferType\",\"name\":\"_type\",\"type\":\"uint8\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getCurrentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"messageHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonceInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"receiveTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"TokenBridge\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.18;\\n\\n// import \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\ninterface IERC20 {\\n    function bridgeBurn(address account, uint256 amount) external;\\n\\n    function bridgeMint(address account, uint256 amount) external;\\n}\\n\\ncontract TokenBridge {\\n    IERC20 public immutable token;\\n    using ECDSA for bytes32;\\n\\n    enum transferType {\\n        SEND,\\n        RECEIVE\\n    }\\n\\n    event Transfer(\\n        address indexed _address,\\n        uint256 _amount,\\n        uint256 _nonce,\\n        bytes signature,\\n        transferType _type\\n    );\\n\\n    constructor(address _token) {\\n        token = IERC20(_token);\\n    }\\n\\n    // To see if it was completed and to check which nonce is current one in address mapping\\n    mapping(address => uint256) public currentNonce;\\n    mapping(address => mapping(uint256 => bool)) public nonceInProgress;\\n\\n    function sendTokens(\\n        address _address,\\n        uint256 _amount,\\n        bytes calldata signature\\n    ) external {\\n        require(\\n            nonceInProgress[_address][getCurrentNonce(_address)] == false,\\n            \\\"Transaction hasn't been completed yet\\\"\\n        ); //If the last nonce was in progress, the user can't send additional cryptocurrency.\\n        bytes32 hashedMessage = messageHash(_address, _amount);\\n        require(\\n            verifySignature(_address, hashedMessage, signature),\\n            \\\"This transaction was not verified\\\"\\n        ); // To check if the sender has signed the hash\\n        token.bridgeBurn(msg.sender, _amount); // NEED TO ADD CUSTOM INTERFACE\\n        nonceInProgress[_address][getCurrentNonce(_address)] = true; // The nonce is in progress\\n\\n        // Transfer event for automatic send and receive\\n        emit Transfer(\\n            _address,\\n            _amount,\\n            getCurrentNonce(_address),\\n            signature,\\n            transferType.SEND\\n        );\\n    }\\n\\n    function receiveTokens(\\n        address _address,\\n        uint256 _amount,\\n        bytes calldata signature\\n    ) external {\\n        require(\\n            nonceInProgress[_address][getCurrentNonce(_address)] == true,\\n            \\\"The address hasn't sent any tokens\\\"\\n        );\\n        bytes32 hashedMessage = messageHash(_address, _amount);\\n        require(\\n            verifySignature(_address, hashedMessage, signature),\\n            \\\"This transaction was not verified\\\"\\n        ); // To check if the sender has signed the hash\\n        token.bridgeMint(msg.sender, _amount); // NEED TO ADD CUSTOM INTERFACE\\n\\n        // Transfer event for automatic send and receive\\n        emit Transfer(\\n            _address,\\n            _amount,\\n            getCurrentNonce(_address),\\n            signature,\\n            transferType.RECEIVE\\n        );\\n\\n        // Increment the nonce\\n        currentNonce[_address]++;\\n    }\\n\\n    // This needs to get signed to get allowance to call burn and mint function\\n    function messageHash(\\n        address _address,\\n        uint256 amount\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\", // Ethereum prefix for message format\\n                    keccak256(\\n                        abi.encode(_address, amount, getCurrentNonce(_address))\\n                    ) // Adds the current nonce of the address automaticaly\\n                )\\n            );\\n    }\\n\\n    // To check if the signer has signed the message\\n    function verifySignature(\\n        address signer,\\n        bytes32 hashedMessage,\\n        bytes calldata signature\\n    ) internal pure returns (bool) {\\n        return signer == hashedMessage.recover(signature);\\n    }\\n\\n    // Return the current nonce\\n    function getCurrentNonce(address _address) public view returns (uint256) {\\n        return currentNonce[_address];\\n    }\\n}\\n\",\"keccak256\":\"0x013845f4be9541264affed2fb04b7acc048039d122ac9ef0a39ea38bd6ee091a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200154c3803806200154c8339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b608051611414620001386000396000818161029f015281816105ca015261074001526114146000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063791922511161005b57806379192251146100fe5780638bc1e0761461012e578063dc1c6b9c1461014a578063fc0c546a1461017a5761007d565b806314fb5914146100825780634bc854911461009e5780636437ecfc146100ce575b600080fd5b61009c60048036038101906100979190610bb6565b610198565b005b6100b860048036038101906100b39190610c2a565b610400565b6040516100c59190610c83565b60405180910390f35b6100e860048036038101906100e39190610c9e565b610463565b6040516100f59190610cda565b60405180910390f35b61011860048036038101906101139190610c9e565b61047b565b6040516101259190610cda565b60405180910390f35b61014860048036038101906101439190610bb6565b6104c3565b005b610164600480360381019061015f9190610c2a565b61070f565b6040516101719190610d10565b60405180910390f35b61018261073e565b60405161018f9190610d8a565b60405180910390f35b60001515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101e68761047b565b815260200190815260200160002060009054906101000a900460ff16151514610244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023b90610e28565b60405180910390fd5b60006102508585610400565b905061025e85828585610762565b61029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029490610eba565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166374f4f54733866040518363ffffffff1660e01b81526004016102f8929190610ee9565b600060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b5050505060018060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103758861047b565b815260200190815260200160002060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f56f9e9c4e1284ef63fff9b478d652efa6ffa0f0902f5ce00d1f0a49eb90cfb0d856103dc8861047b565b868660006040516103f1959493929190610fe7565b60405180910390a25050505050565b6000828261040d8561047b565b60405160200161041f93929190611035565b6040516020818303038152906040528051906020012060405160200161044591906110e4565b60405160208183030381529060405280519060200120905092915050565b60006020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60011515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006105118761047b565b815260200190815260200160002060009054906101000a900460ff1615151461056f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105669061117c565b60405180910390fd5b600061057b8585610400565b905061058985828585610762565b6105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610eba565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638c2a993e33866040518363ffffffff1660e01b8152600401610623929190610ee9565b600060405180830381600087803b15801561063d57600080fd5b505af1158015610651573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f56f9e9c4e1284ef63fff9b478d652efa6ffa0f0902f5ce00d1f0a49eb90cfb0d856106978861047b565b868660016040516106ac959493929190610fe7565b60405180910390a26000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610703906111cb565b91905055505050505050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107bb83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050856107f390919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b6000806000610802858561081a565b9150915061080f8161086b565b819250505092915050565b600080604183510361085b5760008060006020860151925060408601519150606086015160001a905061084f878285856109d1565b94509450505050610864565b60006002915091505b9250929050565b6000600481111561087f5761087e610f70565b5b81600481111561089257610891610f70565b5b03156109ce57600160048111156108ac576108ab610f70565b5b8160048111156108bf576108be610f70565b5b036108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f69061125f565b60405180910390fd5b6002600481111561091357610912610f70565b5b81600481111561092657610925610f70565b5b03610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095d906112cb565b60405180910390fd5b6003600481111561097a57610979610f70565b5b81600481111561098d5761098c610f70565b5b036109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c49061135d565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a0c576000600391509150610aaa565b600060018787878760405160008152602001604052604051610a319493929190611399565b6020604051602081039080840390855afa158015610a53573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aa157600060019250925050610aaa565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b8114610b0357600080fd5b50565b600081359050610b1581610aef565b92915050565b6000819050919050565b610b2e81610b1b565b8114610b3957600080fd5b50565b600081359050610b4b81610b25565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b7657610b75610b51565b5b8235905067ffffffffffffffff811115610b9357610b92610b56565b5b602083019150836001820283011115610baf57610bae610b5b565b5b9250929050565b60008060008060608587031215610bd057610bcf610ab3565b5b6000610bde87828801610b06565b9450506020610bef87828801610b3c565b935050604085013567ffffffffffffffff811115610c1057610c0f610ab8565b5b610c1c87828801610b60565b925092505092959194509250565b60008060408385031215610c4157610c40610ab3565b5b6000610c4f85828601610b06565b9250506020610c6085828601610b3c565b9150509250929050565b6000819050919050565b610c7d81610c6a565b82525050565b6000602082019050610c986000830184610c74565b92915050565b600060208284031215610cb457610cb3610ab3565b5b6000610cc284828501610b06565b91505092915050565b610cd481610b1b565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b60008115159050919050565b610d0a81610cf5565b82525050565b6000602082019050610d256000830184610d01565b92915050565b6000819050919050565b6000610d50610d4b610d4684610abd565b610d2b565b610abd565b9050919050565b6000610d6282610d35565b9050919050565b6000610d7482610d57565b9050919050565b610d8481610d69565b82525050565b6000602082019050610d9f6000830184610d7b565b92915050565b600082825260208201905092915050565b7f5472616e73616374696f6e206861736e2774206265656e20636f6d706c65746560008201527f6420796574000000000000000000000000000000000000000000000000000000602082015250565b6000610e12602583610da5565b9150610e1d82610db6565b604082019050919050565b60006020820190508181036000830152610e4181610e05565b9050919050565b7f54686973207472616e73616374696f6e20776173206e6f74207665726966696560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000610ea4602183610da5565b9150610eaf82610e48565b604082019050919050565b60006020820190508181036000830152610ed381610e97565b9050919050565b610ee381610add565b82525050565b6000604082019050610efe6000830185610eda565b610f0b6020830184610ccb565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f4f8385610f12565b9350610f5c838584610f23565b610f6583610f32565b840190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fb057610faf610f70565b5b50565b6000819050610fc182610f9f565b919050565b6000610fd182610fb3565b9050919050565b610fe181610fc6565b82525050565b6000608082019050610ffc6000830188610ccb565b6110096020830187610ccb565b818103604083015261101c818587610f43565b905061102b6060830184610fd8565b9695505050505050565b600060608201905061104a6000830186610eda565b6110576020830185610ccb565b6110646040830184610ccb565b949350505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006110ad60028361106c565b91506110b882611077565b600282019050919050565b6000819050919050565b6110de6110d982610c6a565b6110c3565b82525050565b60006110ef826110a0565b91506110fb82846110cd565b60208201915081905092915050565b7f5468652061646472657373206861736e27742073656e7420616e7920746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b6000611166602283610da5565b91506111718261110a565b604082019050919050565b6000602082019050818103600083015261119581611159565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111d682610b1b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112085761120761119c565b5b600182019050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611249601883610da5565b915061125482611213565b602082019050919050565b600060208201905081810360008301526112788161123c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006112b5601f83610da5565b91506112c08261127f565b602082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611347602283610da5565b9150611352826112eb565b604082019050919050565b600060208201905081810360008301526113768161133a565b9050919050565b600060ff82169050919050565b6113938161137d565b82525050565b60006080820190506113ae6000830187610c74565b6113bb602083018661138a565b6113c86040830185610c74565b6113d56060830184610c74565b9594505050505056fea264697066735822122092237861e58b50facfe233ce260d14493d6f2d3a1a960fd9fa1aa969678a234264736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063791922511161005b57806379192251146100fe5780638bc1e0761461012e578063dc1c6b9c1461014a578063fc0c546a1461017a5761007d565b806314fb5914146100825780634bc854911461009e5780636437ecfc146100ce575b600080fd5b61009c60048036038101906100979190610bb6565b610198565b005b6100b860048036038101906100b39190610c2a565b610400565b6040516100c59190610c83565b60405180910390f35b6100e860048036038101906100e39190610c9e565b610463565b6040516100f59190610cda565b60405180910390f35b61011860048036038101906101139190610c9e565b61047b565b6040516101259190610cda565b60405180910390f35b61014860048036038101906101439190610bb6565b6104c3565b005b610164600480360381019061015f9190610c2a565b61070f565b6040516101719190610d10565b60405180910390f35b61018261073e565b60405161018f9190610d8a565b60405180910390f35b60001515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101e68761047b565b815260200190815260200160002060009054906101000a900460ff16151514610244576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023b90610e28565b60405180910390fd5b60006102508585610400565b905061025e85828585610762565b61029d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029490610eba565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166374f4f54733866040518363ffffffff1660e01b81526004016102f8929190610ee9565b600060405180830381600087803b15801561031257600080fd5b505af1158015610326573d6000803e3d6000fd5b5050505060018060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006103758861047b565b815260200190815260200160002060006101000a81548160ff0219169083151502179055508473ffffffffffffffffffffffffffffffffffffffff167f56f9e9c4e1284ef63fff9b478d652efa6ffa0f0902f5ce00d1f0a49eb90cfb0d856103dc8861047b565b868660006040516103f1959493929190610fe7565b60405180910390a25050505050565b6000828261040d8561047b565b60405160200161041f93929190611035565b6040516020818303038152906040528051906020012060405160200161044591906110e4565b60405160208183030381529060405280519060200120905092915050565b60006020528060005260406000206000915090505481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60011515600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006105118761047b565b815260200190815260200160002060009054906101000a900460ff1615151461056f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105669061117c565b60405180910390fd5b600061057b8585610400565b905061058985828585610762565b6105c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105bf90610eba565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638c2a993e33866040518363ffffffff1660e01b8152600401610623929190610ee9565b600060405180830381600087803b15801561063d57600080fd5b505af1158015610651573d6000803e3d6000fd5b505050508473ffffffffffffffffffffffffffffffffffffffff167f56f9e9c4e1284ef63fff9b478d652efa6ffa0f0902f5ce00d1f0a49eb90cfb0d856106978861047b565b868660016040516106ac959493929190610fe7565b60405180910390a26000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190610703906111cb565b91905055505050505050565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006107bb83838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050856107f390919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16149050949350505050565b6000806000610802858561081a565b9150915061080f8161086b565b819250505092915050565b600080604183510361085b5760008060006020860151925060408601519150606086015160001a905061084f878285856109d1565b94509450505050610864565b60006002915091505b9250929050565b6000600481111561087f5761087e610f70565b5b81600481111561089257610891610f70565b5b03156109ce57600160048111156108ac576108ab610f70565b5b8160048111156108bf576108be610f70565b5b036108ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f69061125f565b60405180910390fd5b6002600481111561091357610912610f70565b5b81600481111561092657610925610f70565b5b03610966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095d906112cb565b60405180910390fd5b6003600481111561097a57610979610f70565b5b81600481111561098d5761098c610f70565b5b036109cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109c49061135d565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115610a0c576000600391509150610aaa565b600060018787878760405160008152602001604052604051610a319493929190611399565b6020604051602081039080840390855afa158015610a53573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610aa157600060019250925050610aaa565b80600092509250505b94509492505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ae882610abd565b9050919050565b610af881610add565b8114610b0357600080fd5b50565b600081359050610b1581610aef565b92915050565b6000819050919050565b610b2e81610b1b565b8114610b3957600080fd5b50565b600081359050610b4b81610b25565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610b7657610b75610b51565b5b8235905067ffffffffffffffff811115610b9357610b92610b56565b5b602083019150836001820283011115610baf57610bae610b5b565b5b9250929050565b60008060008060608587031215610bd057610bcf610ab3565b5b6000610bde87828801610b06565b9450506020610bef87828801610b3c565b935050604085013567ffffffffffffffff811115610c1057610c0f610ab8565b5b610c1c87828801610b60565b925092505092959194509250565b60008060408385031215610c4157610c40610ab3565b5b6000610c4f85828601610b06565b9250506020610c6085828601610b3c565b9150509250929050565b6000819050919050565b610c7d81610c6a565b82525050565b6000602082019050610c986000830184610c74565b92915050565b600060208284031215610cb457610cb3610ab3565b5b6000610cc284828501610b06565b91505092915050565b610cd481610b1b565b82525050565b6000602082019050610cef6000830184610ccb565b92915050565b60008115159050919050565b610d0a81610cf5565b82525050565b6000602082019050610d256000830184610d01565b92915050565b6000819050919050565b6000610d50610d4b610d4684610abd565b610d2b565b610abd565b9050919050565b6000610d6282610d35565b9050919050565b6000610d7482610d57565b9050919050565b610d8481610d69565b82525050565b6000602082019050610d9f6000830184610d7b565b92915050565b600082825260208201905092915050565b7f5472616e73616374696f6e206861736e2774206265656e20636f6d706c65746560008201527f6420796574000000000000000000000000000000000000000000000000000000602082015250565b6000610e12602583610da5565b9150610e1d82610db6565b604082019050919050565b60006020820190508181036000830152610e4181610e05565b9050919050565b7f54686973207472616e73616374696f6e20776173206e6f74207665726966696560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000610ea4602183610da5565b9150610eaf82610e48565b604082019050919050565b60006020820190508181036000830152610ed381610e97565b9050919050565b610ee381610add565b82525050565b6000604082019050610efe6000830185610eda565b610f0b6020830184610ccb565b9392505050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610f4f8385610f12565b9350610f5c838584610f23565b610f6583610f32565b840190509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610fb057610faf610f70565b5b50565b6000819050610fc182610f9f565b919050565b6000610fd182610fb3565b9050919050565b610fe181610fc6565b82525050565b6000608082019050610ffc6000830188610ccb565b6110096020830187610ccb565b818103604083015261101c818587610f43565b905061102b6060830184610fd8565b9695505050505050565b600060608201905061104a6000830186610eda565b6110576020830185610ccb565b6110646040830184610ccb565b949350505050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006110ad60028361106c565b91506110b882611077565b600282019050919050565b6000819050919050565b6110de6110d982610c6a565b6110c3565b82525050565b60006110ef826110a0565b91506110fb82846110cd565b60208201915081905092915050565b7f5468652061646472657373206861736e27742073656e7420616e7920746f6b6560008201527f6e73000000000000000000000000000000000000000000000000000000000000602082015250565b6000611166602283610da5565b91506111718261110a565b604082019050919050565b6000602082019050818103600083015261119581611159565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111d682610b1b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112085761120761119c565b5b600182019050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000611249601883610da5565b915061125482611213565b602082019050919050565b600060208201905081810360008301526112788161123c565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006112b5601f83610da5565b91506112c08261127f565b602082019050919050565b600060208201905081810360008301526112e4816112a8565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b6000611347602283610da5565b9150611352826112eb565b604082019050919050565b600060208201905081810360008301526113768161133a565b9050919050565b600060ff82169050919050565b6113938161137d565b82525050565b60006080820190506113ae6000830187610c74565b6113bb602083018661138a565b6113c86040830185610c74565b6113d56060830184610c74565b9594505050505056fea264697066735822122092237861e58b50facfe233ce260d14493d6f2d3a1a960fd9fa1aa969678a234264736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2333,
        "contract": "contracts/Bridge.sol:TokenBridge",
        "label": "currentNonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2339,
        "contract": "contracts/Bridge.sol:TokenBridge",
        "label": "nonceInProgress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}